scalar StudentID
scalar Club

interface StudentInfo {
    studentId: StudentID!
    name: String! @constraint(maxLength: 5)
    phoneNumber: String! @constraint(pattern: "^010([0-9]{8})$")
}

type Student implements StudentInfo {
    studentId: StudentID!
    name: String! @constraint(maxLength: 5)
    phoneNumber: String! @constraint(pattern: "^010([0-9]{8})$")
}

type Form implements StudentInfo {
    studentId: StudentID!
    name: String! @constraint(maxLength: 5)
    club: Club!
    answerList: [String]!
    portfolioURL: URL
    otherURLs: [URL]!
    formId: ObjectID!
    date: DateTime!
    phoneNumber: String! @constraint(pattern: "^010([0-9]{8})$")
}

input CreateFormInput {
    studentId: StudentID!
    name: String! @constraint(maxLength: 5)
    club: Club!
    phoneNumber: String! @constraint(pattern: "^010([0-9]{8})$")
    answerList: [String!]!
    portfolioURL: URL
    otherURLs: [URL]!
}

extend type Mutation {

    # 동아리 신청서 전송
    createForm(
        input: CreateFormInput!
    ): Form!
}

extend type Query {

    # 동아리 별로 신청서를 가져옵니다
    getFormByClub(
        club: Club!
        offset: Int! = 10
        cursor: ObjectID
    ): FormConnection!

    # 학번으로 신청서를 가져옵니다
    getFormByStudentId(
        studentId: StudentID!
        offset: Int! = 10
        cursor: ObjectID
    ): FormConnection!

    # 동아리로 동아리 지원자 리스트 가져오기
    getStudentByClub(
        club: Club!
    ): [Student!]! 

    # 동아리 지원 현황 가져오기
    getLiveFormStatus: [FormStatus!]!
}

type FormStatus {
    club: Club!
    formCount: UnsignedInt!
}

type FormEdge {
    node: Form!
    cursor: ObjectID!
}

type FormConnection {
    totalCount: Int!
    edges: [FormEdge!]!
    pageInfo: PageInfo!
}