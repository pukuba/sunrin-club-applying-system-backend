scalar StudentID

interface StudentInfo {
    studentId: StudentID!
    name: String! @constraint(maxLength: 5)
    phoneNumber: String! @constraint(pattern: "^010([0-9]{8})$")
}

type Answer implements StudentInfo {
    studentId: StudentID!
    name: String! @constraint(maxLength: 5)
    club: Club!
    answerList: [String]!
    portfolioURL: URL
    otherURLs: [URL]!
    answerId: ObjectID!
    date: DateTime!
    phoneNumber: String! @constraint(pattern: "^010([0-9]{8})$")
}

input CreateAnswerInput {
    studentId: StudentID!
    name: String! @constraint(maxLength: 5)
    club: Club!
    phoneNumber: String! @constraint(pattern: "^010([0-9]{8})$")
    answerList: [String!]!
    portfolioURL: URL
    otherURLs: [URL]!
}

type CreateAnswerInvalidInputError implements Error {
    message: String!
    path: String!
    suggestion: String!
}

type RateLimitError implements Error {
    message: String!
    path: String!
    suggestion: String!
    afterTry: UnsignedInt!
}

union CreateAnswerResult = Answer | InvalidFormError | CreateAnswerInvalidInputError | RateLimitError

extend type Mutation {

    # 동아리 신청서 전송
    createAnswer(
        input: CreateAnswerInput!
    ): CreateAnswerResult! @ratelimit(ttl: 60, max: 10, key: "createAnswer", keyType: IP)
}

extend type Query {


    # 동아리 지원 현황 가져오기
    getLiveAnswerStatus: [AnswerStatus!]!

    getAnswerByClub(
        club: Club!
        limit: UnsignedInt = 10
        cursor: ObjectID
    ): AnswerConnection!

     # 학번으로 신청서를 가져옵니다
    getAnswerByStudentId(
        studentId: StudentID!
        limit: UnsignedInt = 10
        cursor: ObjectID
    ): AnswerConnection!
}

type AnswerStatus {
    club: Club!
    answerCount: UnsignedInt!
}

type AnswerEdge {
    node: Answer!
    cursor: ObjectID!
}

type AnswerConnection {
    totalCount: UnsignedInt!
    edges: [AnswerEdge!]!
    pageInfo: CursorPageInfo!
}